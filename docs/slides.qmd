---
title: "Designing Charts in R"
subtitle: "Reproducible Graphic Design with {ggplot2}"
author: "<b style='color:#28a87d;'><a href='https://www.cedricscherer.com'>Cédric Scherer</a></b> **//** Data Visualization Society **//** March 9, 2023"
format:
  revealjs:
    theme: css/style.scss
    footer: '**[Cédric Scherer](https://cedricscherer.com) //** Data Visualization Society **//** March 9, 2023'
    logo: https://d33wubrfki0l68.cloudfront.net/d4cd9bd8e591d8973d68f98a71544bbe65d53733/79b34/img/logo.png
    transition: fade
    progress: true
    multiplex: false
    preview-links: true
    scrollable: false
    hide-inactive-cursor: true
    highlight-style: printing
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: true
    pause: true
    mainfont: Cabinet Grotesk
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: auto
  cache: true
  echo: true
  fig-width: 5
  fig-height: 6
---

# Welcome!


##  {background-image="img/hello-cedric.png" background-position="center" background-size="55%"}

::: footer
:::

##  {background-image="img/portfolio-cards.png" background-position="center" background-size="80%"}

::: footer
:::


##  {background-image="img/projects-science.png" background-position="center" background-size="80%" background-color="#606060"}

::: footer
:::


##  {background-image="img/projects-clients.png" background-position="center" background-size="80%" background-color="#606060"}

::: footer
:::


##  {background-image="img/projects-personal.png" background-position="center" background-size="80%" background-color="#606060"}

::: footer
:::


##  {background-image="img/blog.png" background-position="center" background-size="35%"}


##  {background-image="img/blog-tutorial.png" background-position="center" background-size="35%"}


##  {background-image="img/blog-rstudioconf.png" background-position="center" background-size="35%"}


##  {background-image="img/blog-evol.png" background-position="center" background-size="35%"}


##  {background-image="img/github.png" background-position="center" background-size="35%"}


# The ggplot2 Package

##

::: footer
[{ggplot2} package description](https://ggplot2.tidyverse.org/)
:::

![](img/ggplot2.png){fig-align="center" fig-alt="The ggplot2 hex logo."}

<br>

<b style='font-size:30pt;'><code>{ggplot2}</code> is a system for declaratively creating graphics,<br>based on ["The Grammar of Graphics"]{.simple-highlight-grn} (Wilkinson, 2005).</b>

::: fragment
[You provide the data, tell <code>{ggplot2}</code> how to]{style="font-size:24pt;"} [map variables to aesthetics,]{.circle-highlight}<br>what graphical primitives to use, and it takes care of the details.
:::

## Advantages of {ggplot2}

::: incremental
-   code-first approach &rarr; reproducible and transparent workflow\
-   consistent underlying "grammar of graphics"\
-   very flexible, layered plot specification\
-   theme system for polishing plot appearance\
-   lots of additional functionality thanks to extensions\
-   active and helpful community
:::

---

![Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/ah_ggplot2_exploratory.png){fig-align="center" fig-alt="Allison Horsts monster illustration of explorative plotting with ggplot2."}

---

![ggplot2 Examples featured on ggplot2.tidyverse.org](img/basic_ggplots.png){fig-align="center" fig-alt="A collection of the versatility of ggplot2 to create basic graphs. All of them use the default grey ggplot2 theme."}

---

![Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/ah_ggplot2_masterpiece.png){fig-align="center" fig-alt="Allison Horsts monster illustration of building  data masterpiece ith ggplot2 featuring a little Picasso monster :)"}


##  {background-image="img/evol-ggplot-1.gif" background-position="center" background-size="62%"}

---

<br>
![Collection of Graphics from the BBC R Cookbook](img/bbc-gallery.png){fig-align="center" fig-alt="A multi-plot panel of various data visualizations created by the BBC teams."}

---

<br>
![Collection of Graphics from the BBC R Cookbook](img/bbc-gallery-quote.png){fig-align="center" fig-alt="A multi-plot panel of various data visualizations created by the BBC teams."}

---

![Selection of visualizations created 100% with ggplot2 by Thomas Linn Pedersen,<br>Georgios Karamanis, Timo Gossenbacher, Torsten Sprengler, Jake Kaupp, Jack Davison, and myself.](img/showcase.png){fig-align="center" fig-size="80%" fig-alt="A collection of more advanced graphics created100% with ggplot2."}


# A Motivational Example

```{r}
#| label: load-data-example
#| include: false
#| purl: false
library(dplyr)
library(ggplot2)

bikes <-
  readr::read_csv(
    here::here("data", "london-bikes-custom.csv"),
    col_types = "Dcfffilllddddc"
  ) %>%
  dplyr::mutate(
    season = factor(season, levels = c("spring", "summer", "autumn", "winter")),
    is_workday = factor(is_workday, level = c(TRUE, FALSE),
                        labels = c("workday", "weekend_or_holiday"))
  )

theme_set(theme_grey(base_size = 15, base_line_size = .5))
```

---

```{r}
#| label: example-motivation-basic
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
## scatter plot of plot bikes$count versus bikes$count
ggplot(bikes, aes(temp_feel, count)) +
  geom_point(size = 2.2)
```

---

```{r}
#| label: example-motivation-basic-season
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g1 <- 
  ## create scatter plot, encoded based on season
  ggplot(bikes, aes(temp_feel, count)) +
  geom_point(
    aes(color = season),
    size = 2.2, alpha = .55
  ) 

g1
```

---

```{r}
#| label: example-motivation-basic-smooth
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g2 <- g1 +
  ## add a linear fitting for each time of the day
  geom_smooth(
    aes(group = day_night),
    method = "lm", color = "black"
  )

g2
```

---

```{r}
#| label: example-motivation-basic-labs
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g3 <- g2 +
  ## add titles + labels
  labs(
    x = "Feels-Like Temperature", y = NULL,
    caption = "Data: Transport for London (TfL), Jan 2015—Dec 2016",
    title = "Reported TfL bike rents versus feels-like temperature in London, 2015–2016"
  )

g3
```

---

```{r}
#| label: example-motivation-theme-complete
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g4 <- g3 + 
  theme_light(base_size = 18, base_family = "Spline Sans")

g4
```


---

```{r}
#| label: example-motivation-facet-space
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
codes <- c(
  workday = "Workday",
  weekend_or_holiday = "Weekend or Holiday"
)

g5 <- g4 +
  facet_grid(
    day_night ~ is_workday,
    scales = "free_y", space = "free_y",
    labeller = labeller(
      day_night = stringr::str_to_title,
      is_workday = codes
    )
  )

g5
```

---

```{r}
#| label: example-motivation-scales
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g6 <- g5  +
  ## adjust labels x-axis
  scale_x_continuous(
    expand = c(mult = 0, add = 1),
    breaks = 0:6*5, labels = function(x) paste0(x, "°C")
  ) +
  ## adjust labels y-axis
  scale_y_continuous(
    expand = c(mult = .05, add = 0),limits = c(0, NA),
    breaks = 0:5*10000, labels = scales::label_comma()
  ) +
  ## modify colors + legend
  scale_color_manual(
    values = c("#3c89d9", "#1ec99b", "#F7B01B", "#a26e7c"), name = NULL,
    breaks = stringr::str_to_title,
    guide = guide_legend(override.aes = list(size = 5))
  ) 

g6
```

---

```{r}
#| label: example-motivation-theme-modifications
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g6 + 
  ## theme modifications
  theme(
    plot.title.position = "plot",
    plot.caption.position = "plot",
    plot.title = element_text(face = "bold", size = rel(1.5)),
    axis.text = element_text(family = "Spline Sans Mono", color = "grey45"),
    axis.title.x = element_text(hjust = 0, margin = margin(t = 12), color = "grey25"),
    strip.text = element_text(face = "bold", size = rel(1.1)),
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    legend.position = "top"
  )
```


# Setup

## The ggplot2 Package

<br>

... is an **R package to visualize data** created by Hadley Wickham in 2005

```{r}
#| label: ggplot-package-install-2
#| eval: false
# install.packages("ggplot2")
library(ggplot2)
```

<br>

::: fragment
... is part of the [`{tidyverse}`](https://www.tidyverse.org/)

```{r}
#| label: tidyverse-package-install-2
#| eval: false
# install.packages("tidyverse")
library(tidyverse)
```
:::

##  {background-image="img/tidyverse-packages.png" background-position="center" background-size="100%"}

::: footer
:::

##  {background-image="img/tidyverse-packages-ggplot.png" background-position="center" background-size="100%"}

::: footer
:::


# The Grammar of {ggplot2}


## The Grammar of {ggplot2}

<br>
<table style='width:100%;font-size:14pt;'>
  <tr>
    <th>Component</th>
    <th>Function</th>
    <th>Explanation</th>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Data</b></td>
    <td><code>ggplot(data)</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>*The raw data that you want to visualise.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Aesthetics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></td>
    <td><code>aes()</code></td>
    <td>*Aesthetic mappings between variables and visual properties.*</td>
  <tr>
    <td><b style='color:#67676;'>Geometries</b></td>
    <td><code>geom_*()</code></td>
    <td>*The geometric shapes representing the data.*</td>
  </tr>
</table>



## The Grammar of {ggplot2}


<br>
<table style='width:100%;font-size:14pt;'>
  <tr>
    <th>Component</th>
    <th>Function</th>
    <th>Explanation</th>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Data</b></td>
    <td><code>ggplot(data)</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>*The raw data that you want to visualise.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Aesthetics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></td>
    <td><code>aes()</code></td>
    <td>*Aesthetic mappings between variables and visual properties.*</td>
  <tr>
    <td><b style='color:#67676;'>Geometries</b></td>
    <td><code>geom_*()</code></td>
    <td>*The geometric shapes representing the data.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Statistics</b></td>
    <td><code>stat_*()</code></td>
    <td>*The statistical transformations applied to the data.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Scales</b></td>
    <td><code>scale_*()</code></td>
    <td>*Maps between the data and the aesthetic dimensions.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Facets</b></td>
    <td><code>facet_*()</code></td>
    <td>*The arrangement of the data into a grid of plots.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Coordinate System</b></td>
    <td><code>coord_*()</code></td>
    <td>*Maps data into the plane of the data rectangle.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Visual Themes</b></td>
    <td><code>theme()</code> and <code>theme_*()</code></td>
    <td>*The overall visual defaults of a plot.*</td>
  </tr>
</table>



## The Data

<b style='font-size:2.3rem;'>Bike sharing counts in London, UK, powered by [TfL Open Data](https://tfl.gov.uk/modes/cycling/santander-cycles)</b>

::: incremental
-   covers the years 2015 and 2016
-   incl. weather data acquired from [freemeteo.com](https://freemeteo.com)
-   prepared by Hristo Mavrodiev for [Kaggle](https://www.kaggle.com/hmavrodiev/london-bike-sharing-dataset)
-   further modification by myself
:::

<br>

::: fragment
```{r}
#| label: data-import
#| eval: false
bikes <- readr::read_csv(
  "./data/london-bikes-custom.csv",
  ## or: "https://cedricscherer.com/data/london-bikes-custom.csv"
  col_types = "Dcfffilllddddc"
)

bikes$season <- forcats::fct_inorder(bikes$season)
```
:::

---

```{r}
#| label: data-table
#| echo: false
#| purl: false
library(tibble)
library(dplyr)

tibble(
    Variable = names(bikes),
    Description = c(
      "Date encoded as `YYYY-MM-DD`", "`day` (6:00am–5:59pm) or `night` (6:00pm–5:59am)", "`2015` or `2016`", "`1` (January) to `12` (December)", "`winter`, `spring`, `summer`, or `autumn`", "Sum of reported bikes rented", "`TRUE` being Monday to Friday and no bank holiday", "`TRUE` being Saturday or Sunday", "`TRUE` being a bank holiday in the UK", "Average air temperature (°C)", "Average feels like temperature (°C)", "Average air humidity (%)", "Average wind speed (km/h)", "Most common weather type"
    ),
    Class = c(
      "date", "character", "factor", "factor", "factor", "integer", "logical", "logical", "logical", "double", "double", "double", "double", "character"
    )
  ) %>%
  kableExtra::kbl(
    booktabs = TRUE, longtable = TRUE
  ) %>%
  kableExtra::kable_styling(
    font_size = 24
  ) %>%
  kableExtra::kable_minimal(
    "hover", full_width = TRUE, position = "left", html_font = "Cabinet Grotesk"
  )

```

# Fundamentals of {ggplot2}

## `ggplot2::ggplot()`

```{r}
#| label: ggplot-function
#| eval: false
#| echo: false
#?ggplot
```

![](img/ggplot-fun-help.png){fig-alt="The help page of the ggplot() function." fig-width="175%"}

## Data

```{r}
#| label: setup-ggplot-slides
#| include: false
#| purl: false
library(ggplot2)
theme_set(theme_grey(base_size = 14, base_line_size = .5, base_family = "Asap Condensed"))
```

```{r}
#| label: ggplot-data
#| output-location: column
ggplot(data = bikes)
```

## Aesthetic Mapping

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= link variables to graphical properties</b><br><br>

::: incremental
-   positions (`x`, `y`)
-   colors (`color`, `fill`)
-   shapes (`shape`, `linetype`)
-   size (`size`)
-   transparency (`alpha`)
-   groupings (`group`)
:::

## Aesthetic Mapping

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= link variables to graphical properties</b><br><br>

::: incremental
-   feels-like temperature ⇄ x
-   reported bike shares ⇄ y
-   season ⇄ color
-   year ⇄ shape
-   ...
:::

## Aesthetic Mapping

```{r}
#| label: ggplot-aesthetics-outside
#| output-location: column
#| code-line-numbers: "2|1,2"
ggplot(data = bikes) +
  aes(x = temp_feel, y = count)
```

## Aesthetic Mapping

```{r}
#| label: ggplot-aesthetics-inside
#| output-location: column
#| code-line-numbers: "2,3"
ggplot(
  data = bikes,
  mapping = aes(x = temp_feel, y = count)
)
```

## Aesthetic Mapping

```{r}
#| label: ggplot-aesthetics-inside.implicit
#| output-location: column
#| code-line-numbers: "2,3"
ggplot(
  bikes,
  aes(x = temp_feel, y = count)
)
```

# Geometrical Layers

## Geometries

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= interpret aesthetics as graphical representations</b><br><br>

::: incremental
-   points
-   lines
-   polygons
-   text labels
-   ...
:::

## Geometries

```{r}
#| label: geom-point
#| output-location: column
#| code-line-numbers: "1,2,3,4|5"
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point()
```

## Geometries

```{r}
#| label: geom-histogram
#| output-location: column
#| code-line-numbers: "5|3,5"
ggplot(
    bikes,
    aes(x = humidity)
  ) +
  geom_histogram()
```

## Geometries

```{r}
#| label: geom-boxplot
#| output-location: column
#| code-line-numbers: "5|3,5"
ggplot(
    bikes,
    aes(x = season, y = count)
  ) +
  geom_boxplot()
```

## Visual Properties of Layers

```{r}
#| label: geom-point-properties
#| output-location: column
#| code-line-numbers: "5,11|6,7,8,9,10"
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    color = "dodgerblue",
    alpha = .5,
    shape = "X",
    stroke = 1,
    size = 4
  )
```

## Setting vs Mapping of Visual Properties

::: {layout-ncol="2"}
```{r}
#| label: geom-point-properties-set
#| fig-height: 3.5
#| code-line-numbers: "6"
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    color = "dodgerblue",
    alpha = .5
  )
```

::: fragment
```{r}
#| label: geom-point-properties-map
#| fig-height: 3.5
#| code-line-numbers: "6"
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    aes(color = season),
    alpha = .5
  )
```
:::
:::

## Mapping Expressions

```{r}
#| label: geom-point-aes-expression
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    aes(color = temp_feel > 20),
    alpha = .5
  )
```

## Your Turn

::: exercise
-   **Create a chart showing a time series of reported bike shares**
    -   What is the difference between `geom_line()` and `geom_path()`?
    -   Map the color of the lines to `day_night`.
    -   Add points for each observation, colored by the same variable.
    -   Turn the points into diamonds.
:::

## Solution Exercise

```{r}
#| label: exercise-timeseries-geom-aes-1
#| output-location: column
#| code-line-numbers: "3|5"
#| purl: false
ggplot(
    bikes,
    aes(x = date, y = count)
  ) +
  geom_line()
```

## Solution Exercise

::: {layout-ncol="2"}
```{r}
#| label: exercise-timeseries-geom-aes-line
#| fig-height: 4.3
#| code-line-numbers: "3,5"
#| purl: false
ggplot(
    bikes,
    aes(x = count, y = date)
  ) +
  geom_line()
```

::: fragment
```{r}
#| label: exercise-timeseries-geom-aes-path
#| fig-height: 4.3
#| code-line-numbers: "3,5"
#| purl: false
ggplot(
    bikes,
    aes(x = count, y = date)
  ) +
  geom_path()
```
:::
:::


## Solution Exercise

```{r}
#| label: exercise-timeseries-geom-aes-2
#| output-location: column
#| code-line-numbers: "6|5,6,7"
#| purl: false
ggplot(
    bikes,
    aes(x = date, y = count)
  ) +
  geom_line(
    aes(color = day_night)
  )
```

## Solution Exercise

```{r}
#| label: exercise-timeseries-geom-aes-3
#| output-location: column
#| code-line-numbers: "8"
#| purl: false
ggplot(
    bikes,
    aes(x = date, y = count)
  ) +
  geom_line(
    aes(color = day_night)
  ) +
  geom_point()
```

## Solution Exercise

```{r}
#| label: exercise-timeseries-geom-aes-4
#| output-location: column
#| code-line-numbers: "9|6,9|3,6,9"
#| purl: false
ggplot(
    bikes,
    aes(x = date, y = count)
  ) +
  geom_line(
    aes(color = day_night)
  ) +
  geom_point(
    aes(color = day_night)
  )
```

## Solution Exercise

```{r}
#| label: exercise-timeseries-geom-aes-5
#| output-location: column
#| code-line-numbers: "4,6,7|3,4"
#| purl: false
ggplot(
    bikes,
    aes(x = date, y = count,
        color = day_night)
  ) +
  geom_line() +
  geom_point()
```

## Solution Exercise

```{r}
#| label: exercise-timeseries-geom-aes-6
#| output-location: column
#| code-line-numbers: "8|9"
#| purl: false
ggplot(
    bikes,
    aes(x = date, y = count,
        color = day_night)
  ) +
  geom_line() +
  geom_point(
    shape = "diamond",
    size = 3
  )
```

## Solution Exercise

```{r}
#| label: exercise-timeseries-geom-aes-7
#| output-location: column
#| code-line-numbers: "8"
#| purl: false
ggplot(
    bikes,
    aes(x = date, y = count,
        color = day_night)
  ) +
  geom_line() +
  geom_point(
    shape = 18,
    size = 3
  )
```


---

![Source: [Albert's Blog](https://blog.albertkuo.me/post/point-shape-options-in-ggplot/)](img/shapes-type.png){fig-alt="An overview of a set of available shapes, ordered by their type of shape (e.g. points, triangles etc)." fig-width="150%"}


```{r}
#| label: reset-theme
#| include: false
#| purl: false
theme_set(theme_grey(base_size = 14, base_line_size = .5, base_family = "Asap Condensed"))
```

## Local vs. Global Encoding

::: {layout-ncol="2"}
```{r}
#| label: geom-point-aes-geom
#| code-line-numbers: "3,6"
#| fig-height: 3.2
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    aes(color = season),
    alpha = .5
  )
```

::: fragment
```{r}
#| label: geom-point-aes-global
#| code-line-numbers: "3,4"
#| fig-height: 3.2
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season)
  ) +
  geom_point(
    alpha = .5
  )
```
:::
:::

## Adding More Layers

```{r}
#| label: geom-smooth
#| output-location: column
#| code-line-numbers: "9,10,11"
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season)
  ) +
  geom_point(
    alpha = .5
  ) +
  geom_smooth(
    method = "lm"
  )
```

## Global Color Encoding

```{r}
#| label: geom-smooth-aes-global
#| output-location: column
#| code-line-numbers: "3,4,9,10,11"
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season)
  ) +
  geom_point(
    alpha = .5
  ) +
  geom_smooth(
    method = "lm"
  )
```

## Local Color Encoding

```{r}
#| label: geom-smooth-aes-fixed
#| output-location: column
#| code-line-numbers: "6,9,10,11"
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    aes(color = season),
    alpha = .5
  ) +
  geom_smooth(
    method = "lm"
  )
```

## The \`group\` Aesthetic

```{r}
#| label: geom-smooth-aes-grouped
#| output-location: column
#| code-line-numbers: "10"
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    aes(color = season),
    alpha = .5
  ) +
  geom_smooth(
    aes(group = day_night),
    method = "lm"
  )
```

## Set Both as Global Aesthetics

```{r}
#| label: geom-smooth-aes-global-grouped
#| output-location: column
#| code-line-numbers: "4,5"
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season,
        group = day_night)
  ) +
  geom_point(
    alpha = .5
  ) +
  geom_smooth(
    method = "lm"
  )
```

## Overwrite Global Aesthetics

```{r}
#| label: geom-smooth-aes-global-grouped-overwrite
#| output-location: column
#| code-line-numbers: "4,12"
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season,
        group = day_night)
  ) +
  geom_point(
    alpha = .5
  ) +
  geom_smooth(
    method = "lm",
    color = "black"
  )
```

## Store a ggplot as Object

```{r}
#| label: ggplot-object
#| code-line-numbers: "1"
g <-
  ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season,
        group = day_night)
  ) +
  geom_point(
    alpha = .5
  ) +
  geom_smooth(
    method = "lm",
    color = "black"
  )
```

::: fragment
```{r}
#| label: ggplot-object-class
class(g)
```

:::


## Add More Layers

```{r}
#| label: ggplot-object-extend-geom
#| output-location: column
g +
  geom_rug(
    alpha = .2
  )
```

## Remove a Layer from the Legend

```{r}
#| label: geom-guide-none
#| output-location: column
#| code-line-numbers: "4"
g +
  geom_rug(
    alpha = .2,
    show.legend = FALSE
  )
```


## Add More Layers

```{r}
#| label: geom-linerange
#| output-location: column
#| code-line-numbers: "6,7,8"
g +
  geom_rug(
    alpha = .2,
    show.legend = FALSE
  ) +
  geom_linerange(
    aes(ymin = 0, ymax = count)
  )
```


# A Polished<br>ggplot Example

## Add Labels

```{r}
#| label: ggplot-labs-bundled
#| output-location: column
#| code-line-numbers: "2,3,4,5,6"
g +
  labs(
    x = "Feels-like temperature (°C)",
    y = "Reported bike shares",
    title = "TfL bike sharing trends"
  )
```

## Add Labels

```{r}
#| label: ggplot-labs-bundled-color
#| output-location: column
#| code-line-numbers: "6"
g <- g +
  labs(
    x = "Feels-like temperature (°C)",
    y = "Reported bike shares",
    title = "TfL bike sharing trends",
    color = NULL
  )

g
```

## Add Labels

```{r}
#| label: ggplot-labs-bundled-extended
#| output-location: column
#| code-line-numbers: "3,4,5,6"
g +
  labs(
    subtitle = "Reported bike rents versus feels-like temperature in London",
    caption = "Data: TfL",
    tag = "A)",
    color = "Season:"
  )
```

## Add Labels

::: {layout-ncol="2"}
```{r}
#| label: ggplot-labs-empty-vs-null-A
#| fig-height: 3.6
#| code-line-numbers: "3"
g +
  labs(
    x = "",
    caption = "Data: TfL"
  )
```

```{r}
#| label: ggplot-labs-empty-vs-null-B
#| fig-height: 3.6
#| code-line-numbers: "3"
g +
  labs(
    x = NULL,
    caption = "Data: TfL"
  )
```
:::


## Themes

::: {layout-ncol="2"}
```{r}
#| label: ggplot-object-extend-theme-light
#| fig-height: 5.5
g + theme_light()
```

::: fragment
```{r}
#| label: ggplot-object-extend-theme-minimal
#| fig-height: 5.5
g + theme_minimal()
```
:::
:::

## Themes

::: {layout-ncol="2"}
```{r}
#| label: ggplot-object-extend-theme-wsj
#| fig-height: 5.5
#| purl: false
g + ggthemes::theme_excel()
```

::: fragment
```{r}
#| label: ggplot-object-extend-theme-rick-morty
#| fig-height: 5.5
#| purl: false
g + tvthemes::theme_rickAndMorty()
```
:::
:::

## Change the Theme Base Settings

```{r}
#| label: ggplot-theme-extend-theme-base
#| output-location: column
#| code-line-numbers: "2,3|1,2,3,4"
g + theme_light(
  base_size = 14,
  base_family = "Asap Condensed"
)
```

## Set a Theme Globally

```{r}
#| label: ggplot-theme-global
#| output-location: column
theme_set(theme_light())

g
```

## Change the Theme Base Settings

```{r}
#| label: ggplot-theme-global-base
#| output-location: column
#| code-line-numbers: "2,3|1,2,3,4"
theme_set(theme_light(
  base_size = 14,
  base_family = "Asap Condensed"
))

g
```

## {systemfonts}

```{r}
#| label: systemfonts
#| code-line-numbers: "1,2|4,5,6,7,8"
# install.packages("systemfonts")
library(systemfonts)

system_fonts() %>%
  filter(stringr::str_detect(family, "Asap")) %>%
  pull(family) %>%
  unique() %>% 
  sort()
```

## {systemfonts}

```{r}
#| label: systemfonts-register
#| code-line-numbers: "1,2,3,4,5,6|1|2,3|2,4|5"
register_variant(
  name = "Cabinet Grotesk Black",
  family = "Cabinet Grotesk",
  weight = "heavy",
  features = font_feature(letters = "stylistic")
)
```

## {systemfonts} + {ggplot2}

```{r}
#| label: systemfonts-register-plot
#| output-location: column
#| code-line-numbers: "4"
g +
  theme_light(
    base_size = 18,
    base_family = "Cabinet Grotesk Black"
  )
```

## Overwrite Specific Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-1
#| output-location: column
#| code-line-numbers: "2|3"
g +
  theme(
    panel.grid.minor = element_blank()
  )
```

## Overwrite Specific Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-2
#| output-location: column
#| code-line-numbers: "4"
g +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold")
  )
```

## Overwrite Specific Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-3
#| output-location: column
#| code-line-numbers: "5"
g +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold"),
    legend.position = "top"
  )
```

## Overwrite Specific Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-legend-none
#| output-location: column
#| code-line-numbers: "5"
g +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold"),
    legend.position = "none"
  )
```

## Overwrite Specific Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-4
#| output-location: column
#| code-line-numbers: "6|2,3,4,6,7"
g +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold"),
    legend.position = "top",
    plot.title.position = "plot"
  )
```

## Overwrite Theme Settings Globally

```{r}
#| label: ggplot-theme-settings-global
#| output-location: column
#| code-line-numbers: "1|2,3,4,5|1,2,3,4,5,6"
theme_update(
  panel.grid.minor = element_blank(),
  plot.title = element_text(face = "bold"),
  legend.position = "top",
  plot.title.position = "plot"
)

g
```



# Export Your Graphic


## Save the Graphic

```{r}
#| label: ggplot-save
#| eval: false
ggsave(g, filename = "my_plot.png")
```

::: fragment
```{r}
#| label: ggplot-save-implicit
#| eval: false
ggsave("my_plot.png")
```
:::

::: fragment
```{r}
#| label: ggplot-save-aspect
#| eval: false
ggsave("my_plot.png", width = 8, height = 5, dpi = 600)
```
:::

::: fragment
```{r}
#| label: ggplot-save-vector
#| eval: false
ggsave("my_plot.pdf", width = 20, height = 12, unit = "cm", device = cairo_pdf)
```
:::

---

<br>

![Modified from canva.com](img/vector-raster-canva.png){fig-alt="A comparison of vector and raster graphics." fig-width="150%"}



# Scales


## Scales

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= translate between variable and property ranges</b><br><br>

::: incremental
-   feels-like temperature ⇄ x
-   reported bike shares ⇄ y
-   season ⇄ color
-   year ⇄ shape
-   ...
:::


## Scales

The `scale_*()` components control the properties of all the<br><b class='simple-highlight-ylw'>aesthetic dimensions mapped to the data.</b>
<br><br>

::: fragment
Consequently, there are `scale_*()` functions for all aesthetics such as:

::: incremental
-   **positions** via `scale_x_*()` and `scale_y_*()`
-   **colors** via `scale_color_*()` and `scale_fill_*()`
-   **sizes** via `scale_size_*()` and `scale_radius_*()`
-   **shapes** via `scale_shape_*()` and `scale_linetype_*()`
-   **transparency** via `scale_alpha_*()`
:::
:::

::: fragment
::: small
... with tons of options for `*` such as `continuous`, `discrete`, `manual`, `log10`, `gradient`, and many more
:::
:::


## Scales

The `scale_*()` components control the properties of all the<br><b class='simple-highlight-ylw'>aesthetic dimensions mapped to the data.</b>
<br><br>

::: incremental
Use scales to:

-   set breaks (tick marks)
-   overwrite axis / legend labels
-   adjust axis / legend title
-   modify colors and palettes
-   define shapes and line types
-   scale sizes (e.g. bubbles)
:::


---

![Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/continuous_discrete.png){fig-size="120%" fig-align="center" fig-alt="Allison Horsts illustration ofthe correct use of continuous versus discrete; however, in {ggplot2} these are interpeted in a different way: as quantitative and qualitative."}

## Continuous vs. Discrete in {ggplot2}

::: {layout-ncol="2"}
## Continuous:<br>quantitative or numerical data

-   height
-   weight
-   age
-   counts

## Discrete:<br>qualitative or categorical data

-   species
-   sex
-   study sites
-   age group
:::

## Continuous vs. Discrete in {ggplot2}

::: {layout-ncol="2"}
## Continuous:<br>quantitative or numerical data

-   height (continuous)
-   weight (continuous)
-   age (continuous or discrete)
-   counts (discrete)

## Discrete:<br>qualitative or categorical data

-   species (nominal)
-   sex (nominal)
-   study site (nominal or ordinal)
-   age group (ordinal)
:::

## Aesthetics + Scales

```{r}
#| label: scales-default
#| output-location: column
#| code-line-numbers: "3,4,7,8,9|7,8,9"
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season)
  ) +
  geom_point() +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_discrete()
```

## Aesthetics + Scales

```{r}
#| label: scales-default-2
#| output-location: column
#| code-line-numbers: "3,6,7"
ggplot(
    bikes,
    aes(x = season, y = temp_feel)
  ) +
  geom_boxplot() +
  scale_x_discrete() +
  scale_y_continuous()
```

## Aesthetics + Scales

```{r}
#| label: scales-default-g
#| output-location: column
g +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_discrete()
```

## Overwrite Scales

```{r}
#| label: scales-overwrite
#| output-location: column
#| code-line-numbers: "2,3,4"
g +
  scale_x_binned() +
  scale_y_log10() +
  scale_color_viridis_d()
```

## Modify Scales

```{r}
#| label: scales-modify-x-1
#| output-location: column
#| code-line-numbers: "2,3,4|3"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0)
  ) +
  scale_y_continuous() +
  scale_color_discrete()
```

## Modify Scales

```{r}
#| label: scales-modify-x-2
#| output-location: column
#| code-line-numbers: "4"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5)
  ) +
  scale_y_continuous() +
  scale_color_discrete()
```

## Modify Scales

```{r}
#| label: scales-modify-x-3
#| output-location: column
#| code-line-numbers: "5"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C")
  ) +
  scale_y_continuous() +
  scale_color_discrete()
```

## Modify Scales

```{r}
#| label: scales-modify-x-4
#| output-location: column
#| code-line-numbers: "6"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous() +
  scale_color_discrete()
```

## Modify Scales

```{r}
#| label: scales-modify-y-1
#| output-location: column
#| code-line-numbers: "8,10|9"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    limits = c(0, NA)
  ) +
  scale_color_discrete()
```

## Modify Scales

```{r}
#| label: scales-modify-y-2
#| output-location: column
#| code-line-numbers: "9"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    limits = c(5000, 20000)
  ) +
  scale_color_discrete()
```

## Modify Scales

```{r}
#| label: scales-modify-y-3
#| output-location: column
#| code-line-numbers: "9"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    breaks = c(100, 10000, 20000, 50000)
  ) +
  scale_color_discrete()
```

## Modify Scales

```{r}
#| label: scales-modify-y-4
#| output-location: column
#| code-line-numbers: "9"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    breaks = 0:5*10000
  ) +
  scale_color_discrete()
```

## Modify Scales

```{r}
#| label: scales-modify-y-5
#| output-location: column
#| code-line-numbers: "10"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    breaks = 0:5*10000, 
    labels = scales::label_comma()
  ) +
  scale_color_discrete()
```

## Modify Scales

```{r}
#| label: scales-modify-color-1
#| output-location: column
#| code-line-numbers: "12,14|13"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous( 
    breaks = 0:5*10000, 
    labels = scales::label_comma()
  ) +
  scale_color_discrete(
    type = c("#3c89d9", "#1ec99b", "#f7b01b", "#a26e7c")
  )
```

## Modify Scales

```{r}
#| label: scales-modify-color-2
#| output-location: column
#| code-line-numbers: "12|13"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    breaks = 0:5*10000, 
    labels = scales::label_comma()
  ) +
  scale_color_manual(
    values = c("#3c89d9", "#1ec99b", "#f7b01b", "#a26e7c")
  )
```

## Modify Scales

```{r}
#| label: scales-modify-color-3
#| output-location: column
#| code-line-numbers: "1,2,3,4,5,6,20"
colors_sorted <- c(
  autumn = "#a26e7c",
  spring = "#1ec99b",
  summer = "#f7b01b",
  winter = "#3c89d9"
)

g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    breaks = 0:5*10000, 
    labels = scales::label_comma()
  ) +
  scale_color_manual(
    values = colors_sorted
  )
```

## Modify Scales

```{r}
#| label: scales-modify-color-4
#| output-location: column
#| code-line-numbers: "12,13,14"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    breaks = 0:5*10000, 
    labels = scales::label_comma()
  ) +
  scale_color_brewer(
    palette = "Dark2"
  )
```

## {RColorBrewer}

```{r}
#| label: color-palettes-brewer-show-all
#| fig-width: 12
RColorBrewer::display.brewer.all()
```

## {RColorBrewer}

```{r}
#| label: color-palettes-brewer-show-cvd
#| fig-width: 12
RColorBrewer::display.brewer.all(colorblindFriendly = TRUE)
```


## {rcartocolor}

```{r}
#| label: color-palettes-rcarto-show-all
#| fig-width: 12
# install.packages("rcartocolor")
rcartocolor::display_carto_all()
```


## {rcartocolor}

```{r}
#| label: color-palettes-rcarto-show-cvd
#| fig-width: 12
# install.packages("rcartocolor")
rcartocolor::display_carto_all(colorblind_friendly = TRUE)
```


## {rcartocolor}

```{r}
#| label: scales-modify-color-rcarto
#| output-location: column
#| code-line-numbers: "13,15|14"
g +
  scale_x_continuous(
    expand = c(mult = 0.02, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    expand = c(mult = 0, add = 1500), 
    breaks = 0:5*10000, 
    labels = scales::label_comma()
  ) +
  rcartocolor::scale_color_carto_d(
    palette = "Bold"
  )
```


## {scico}

```{r}
#| label: color-palettes-scico-show-all
#| fig-width: 12
# install.packages("scico")
scico::scico_palette_show()
```


## {scico}

```{r}
#| label: scales-modify-color-scico
#| output-location: column
#| code-line-numbers: "13,15|14"
g +
  scale_x_continuous(
    expand = c(mult = 0.02, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    expand = c(mult = 0, add = 1500), 
    breaks = 0:5*10000, 
    labels = scales::label_comma()
  ) +
  scico::scale_color_scico_d(
    palette = "hawaii"
  )
```


## {scico}

```{r}
#| label: scales-modify-color-scico-cont
#| output-location: column
#| code-line-numbers: "4|7,8,9,10,11"
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = humidity)
  ) +
  geom_point(alpha = .7) +
  scico::scale_color_scico(
    palette = "davos",
    direction = -1,
    end = .8
  )
```


## {scico}

```{r}
#| label: scales-modify-color-viridis-cont
#| output-location: column
#| code-line-numbers: "7,8,9"
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = humidity)
  ) +
  geom_point(alpha = .7) +
  scale_color_viridis_c(
    direction = -1
  )
```


## Modify Scales

```{r}
#| label: scales-modify-color-5
#| output-location: column
#| code-line-numbers: "14"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous( 
    breaks = 0:5*10000, 
    labels = scales::label_comma()
  ) +
  scale_color_manual(
    values = colors_sorted,
    name = NULL
  )
```

## Modify Scales

```{r}
#| label: scales-modify-color-6
#| output-location: column
#| code-line-numbers: "15"
g +
  scale_x_continuous(
    expand = c(mult = 0, add = 0),
    breaks = seq(0, 30, by = 5), 
    labels = function(x) paste0(x, "°C"),
    name = "Feels-like temperature"
  ) +
  scale_y_continuous(
    breaks = 0:5*10000, 
    labels = scales::label_comma()
  ) +
  scale_color_manual(
    values = colors_sorted,
    name = NULL,
    labels = stringr::str_to_title
  )
```

## Your Turn

::: exercise
-   **Style the time series of reported bike shares.**
    -   Add a plot title and meaningful axis and legend titles.
    -   Use a custom set of colors for day and night.
    -   Explore complete themes and pick your favorite.
    -   **Bonus:** Modify the x axis to show every four months along with the year.
:::


## Solution Exercise

```{r}
#| label: exercise-timeseries-polishing-start
#| output-location: column
#| code-line-numbers: "2,3,4,5,6,7,8|1"
#| purl: false
(p <- 
   ggplot(
    bikes,
    aes(x = date, y = count,
        color = day_night)
  ) +
  geom_line() +
  geom_point()
)
```


## Solution Exercise

```{r}
#| label: exercise-timeseries-polishing-1
#| output-location: column
#| code-line-numbers: "1|2,3,4,5,6,7,8"
#| purl: false
p + 
  labs(
    title = "Most bikes are rented during summer days",
    subtitle = "Reported rents of TfL bikes for 2015 and 2016.",
    x = NULL, 
    y = "Reported bike shares", 
    color = NULL
  )
```


## Solution Exercise

```{r}
#| label: exercise-timeseries-polishing-2
#| output-location: column
#| code-line-numbers: "2,3,4,5|3|4"
#| purl: false
p + 
  scale_color_manual(
    values = c("#98730F", "#44458e"),
    labels = c("Day (6am-6pm)", "Night (6pm-6am)")
  ) +
  labs(title = "Most bikes are rented during summer days",
       subtitle = "Reported rents of TfL bikes for 2015 and 2016.",
       x = NULL, y = "Reported bike shares", color = NULL)
```


## Solution Exercise

```{r}
#| label: exercise-timeseries-polishing-3
#| output-location: column
#| code-line-numbers: "6"
#| purl: false
p + 
  scale_color_manual(
    values = c("#98730F", "#44458e"),
    labels = c("Day (6am-6pm)", "Night (6pm-6am)")
  ) +
  theme_minimal(base_family = "Spline Sans", base_size = 15) +
  labs(title = "Most bikes are rented during summer days",
       subtitle = "Reported rents of TfL bikes for 2015 and 2016.",
       x = NULL, y = "Reported bike shares", color = NULL)
```


## Solution Exercise

```{r}
#| label: exercise-timeseries-polishing-4
#| output-location: column
#| code-line-numbers: "7,8,9,10,11,12"
#| purl: false
p + 
  scale_color_manual(
    values = c("#98730F", "#44458e"),
    labels = c("Day (6am-6pm)", "Night (6pm-6am)")
  ) +
  theme_minimal(base_family = "Spline Sans", base_size = 15) +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold"),
    plot.title.position = "plot",
    legend.position = "top"
  ) +
  labs(title = "Most bikes are rented during summer days",
       subtitle = "Reported rents of TfL bikes for 2015 and 2016.",
       x = NULL, y = "Reported bike shares", color = NULL)
```


## Solution Exercise

```{r}
#| label: exercise-timeseries-polishing-5
#| output-location: column
#| code-line-numbers: "2,3,4,5|3,4"
#| purl: false
p + 
  scale_x_date(
    date_breaks = "4 months",
    date_labels = "%m/'%y"
  ) +
  scale_color_manual(
    values = c("#98730F", "#44458e"),
    labels = c("Day (6am-6pm)", "Night (6pm-6am)")
  ) +
  theme_minimal(base_family = "Spline Sans", base_size = 15) +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold"),
    plot.title.position = "plot",
    legend.position = "top"
  ) +
  labs(title = "Most bikes are rented during summer days",
       subtitle = "Reported rents of TfL bikes for 2015 and 2016.",
       x = NULL, y = "Reported bike shares", color = NULL)
```



# Facets

## Facets

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= split variables to multiple panels</b><br><br>

::: fragment
Facets are also known as:

-   small multiples
-   trellis graphs
-   lattice plots
-   conditioning
:::

---

::: {layout-ncol="2"}
```{r}
#| label: facet-types-wrap
#| echo: false
#| purl: false
register_variant(
  name = "Cabinet Grotesk Bold S01",
  family = "Cabinet Grotesk",
  weight = "bold",
  features = font_feature(letters = "stylistic")
)

register_variant(
  name = "Cabinet Grotesk Regular S01",
  family = "Cabinet Grotesk",
  weight = "normal",
  features = font_feature(letters = "stylistic")
)

ggplot(bikes, aes(x = 1, y = 1)) +
  geom_text(
    aes(label = paste0("Subset for\n", stringr::str_to_title(season))),
    size = 5, family = "Cabinet Grotesk Regular S01", lineheight = .9
  ) +
  facet_wrap(~stringr::str_to_title(season)) +
  ggtitle("facet_wrap()") +
  theme_bw(base_size = 24) +
  theme(
    plot.title = element_text(hjust = .5, family = "Tabular", face = "bold"),
    strip.text = element_text(family = "Cabinet Grotesk Bold S01", size = 18),
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank(),
    axis.title = element_blank(),
    plot.background = element_rect(color = "#f8f8f8", fill = "#f8f8f8"),
    plot.margin = margin(t = 3, r = 25)
  )
```

::: fragment
```{r}
#| label: facet-types-grid
#| echo: false
#| purl: false
data <- tibble(
  x = 1, y = 1,
  day_night = c("Day", "Day", "Night", "Night"),
  year = factor(c("2015", "2016", "2015", "2016"), levels = levels(bikes$year)),
  label = c("Subset for\nDay × 2015", "Subset for\nDay × 2016",
            "Subset for\nNight × 2015", "Subset for\nNight × 2016")
)

ggplot(data, aes(x = 1, y = 1)) +
 geom_text(
    aes(label = label),
    size = 5, family = "Cabinet Grotesk Regular S01", lineheight = .9
  ) +
  facet_grid(day_night ~ year) +
  ggtitle("facet_grid()") +
  theme_bw(base_size = 24) +
  theme(
    plot.title = element_text(hjust = .5, family = "Tabular", face = "bold"),
    strip.text = element_text(family = "Cabinet Grotesk Bold S01", size = 18),
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank(),
    axis.title = element_blank(),
    plot.background = element_rect(color = "#f8f8f8", fill = "#f8f8f8"),
    plot.margin = margin(t = 3, l = 25)
  )
```
:::
:::

## Wrapped Facets

```{r}
#| label: facet-wrap
#| output-location: column
#| code-line-numbers: "1,2,3,4|2,4|3"
g +
  facet_wrap(
    vars(day_night)
  )
```

## Wrapped Facets

```{r}
#| label: facet-wrap-circumflex
#| output-location: column
#| code-line-numbers: "3"
g +
  facet_wrap(
    ~ day_night
  )
```

## Facet Multiple Variables

```{r}
#| label: facet-wrap-multiple
#| output-location: column
#| code-line-numbers: "3"
g +
  facet_wrap(
    ~ is_workday + day_night
  )
```

## Gridded Facets

```{r}
#| label: facet-grid
#| output-location: column
#| code-line-numbers: "2,5|3,4"
g +
  facet_grid(
    rows = vars(day_night),
    cols = vars(is_workday)
  )
```

## Gridded Facets

```{r}
#| label: facet-grid-circumflex
#| output-location: column
#| code-line-numbers: "3"
g +
  facet_grid(
    day_night ~ is_workday
  )
```

## Facet Multiple Variables

```{r}
#| label: facet-grid-multiple
#| output-location: column
#| code-line-numbers: "3"
g +
  facet_grid(
    day_night ~ is_workday + season
  )
```

## Facet Options: Free Scaling

```{r}
#| label: facet-grid-options-scales
#| output-location: column
#| code-line-numbers: "4"
g +
  facet_grid(
    day_night ~ is_workday,
    scales = "free"
  )
```


## Facet Options: Proportional Spacing

```{r}
#| label: facet-grid-options-space
#| output-location: column
#| code-line-numbers: "4,5|5"
g +
  facet_grid(
    day_night ~ is_workday,
    scales = "free",
    space = "free"
  )
```

## Facet Options: Proportional Spacing

```{r}
#| label: facet-grid-options-space-y
#| output-location: column
#| code-line-numbers: "4,5"
g +
  facet_grid(
    day_night ~ is_workday,
    scales = "free_y",
    space = "free_y"
  )
```


# Coordinate Systems

## Coordinate Systems

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= interpret the position aesthetics</b><br><br>

::: incremental
-   **linear coordinate systems:** preserve the geometrical shapes
    -   `coord_cartesian()`
    -   `coord_fixed()`
    -   `coord_flip()`
-   **non-linear coordinate systems:** likely change the geometrical shapes
    -   `coord_polar()`
    -   `coord_map()` and `coord_sf()`
    -   `coord_trans()`
:::

## Cartesian Coordinate System

```{r}
#| label: coord-cartesian
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    bikes,
    aes(x = season, y = count)
  ) +
  geom_boxplot() +
  coord_cartesian()
```

## Cartesian Coordinate System

```{r}
#| label: coord-cartesian-zoom
#| output-location: column
#| code-line-numbers: "6,7,8"
ggplot(
    bikes,
    aes(x = season, y = count)
  ) +
  geom_boxplot() +
  coord_cartesian(
    ylim = c(NA, 15000)
  )
```

## Changing Limits

::: {layout-ncol="2"}
```{r}
#| label: coord-cartesian-ylim
#| fig-height: 3.5
#| code-line-numbers: "6,7,8"
ggplot(
    bikes,
    aes(x = season, y = count)
  ) +
  geom_boxplot() +
  coord_cartesian(
    ylim = c(NA, 15000)
  )
```

```{r}
#| label: scale-y-limits
#| fig-height: 3.5
#| code-line-numbers: "6,7,8"
ggplot(
    bikes,
    aes(x = season, y = count)
  ) +
  geom_boxplot() +
  scale_y_continuous(
    limits = c(NA, 15000)
  )
```
:::

## Clipping

```{r}
#| label: coord-clip
#| output-location: column
#| code-line-numbers: "8|10"
ggplot(
    bikes,
    aes(x = season, y = count)
  ) +
  geom_boxplot() +
  coord_cartesian(
    ylim = c(NA, 15000),
    clip = "off"
  ) +
  theme(plot.margin = margin(300, 5, 5, 5))
```

## Remove All Padding

```{r}
#| label: coord-expand-off-clip
#| output-location: column
#| code-line-numbers: "7|8"
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point() +
  coord_cartesian(
    expand = FALSE,
    clip = "off"
  )
```

## Fixed Coordinate System

::: {layout-ncol="2"}
```{r}
#| label: coord-fixed
#| fig-height: 4.2
#| code-line-numbers: "6"
ggplot(
    bikes,
    aes(x = temp_feel, y = temp)
  ) +
  geom_point() +
  coord_fixed()
```

::: fragment
```{r}
#| label: coord-fixed-custom
#| fig-height: 4.2
#| code-line-numbers: "6"
ggplot(
    bikes,
    aes(x = temp_feel, y = temp)
  ) +
  geom_point() +
  coord_fixed(ratio = 4)
```
:::
:::

## Flipped Coordinate System

::: {layout-ncol="2"}
```{r}
#| label: coord-cartesian-comp-flip
#| fig-height: 4.1
#| code-line-numbers: "6"
ggplot(
    bikes,
    aes(x = weather_type)
  ) +
  geom_bar() +
  coord_cartesian()
```

```{r}
#| label: coord-flip
#| fig-height: 4.1
#| code-line-numbers: "6"
ggplot(
    bikes,
    aes(x = weather_type)
  ) +
  geom_bar() +
  coord_flip()
```
:::

## Flipped Coordinate System

::: {layout-ncol="2"}
```{r}
#| label: coord-cartesian-switch-x-y
#| fig-height: 4.1
#| code-line-numbers: "3,6"
ggplot(
    bikes,
    aes(y = weather_type)
  ) +
  geom_bar() +
  coord_cartesian()
```

```{r}
#| label: coord-flip-again
#| fig-height: 4.1
#| code-line-numbers: "3,6"
ggplot(
    bikes,
    aes(x = weather_type)
  ) +
  geom_bar() +
  coord_flip()
```
:::

## Reminder: Sort Your Bars!

```{r}
#| label: forcats-sort-infreq
#| output-location: column
#| code-line-numbers: "1|5|4"
library(forcats)

ggplot(
    filter(bikes, !is.na(weather_type)),
    aes(y = fct_infreq(weather_type))
  ) +
  geom_bar()
```

## Reminder: Sort Your Bars!

```{r}
#| label: forcats-sort-infreq-rev
#| output-location: column
#| code-line-numbers: "5,6,7"
library(forcats)

ggplot(
    filter(bikes, !is.na(weather_type)),
    aes(y = fct_rev(
      fct_infreq(weather_type)
    ))
  ) +
  geom_bar()
```


# Wrap-Up

```{r}
#| label: theme-reset-wrapup
#| include: false
theme_set(theme_grey(base_size = 15, base_line_size = .5))
```


---

```{r}
#| label: example-motivation-basic-season
#| eval: false
#| purl: false
```

---

```{r}
#| label: example-motivation-basic-season
#| echo: false
#| fig-width: 14
#| fig-height: 8.3
```


---

```{r}
#| label: example-motivation-basic-smooth
#| eval: false
#| purl: false
```

---

```{r}
#| label: example-motivation-basic-smooth
#| echo: false
#| fig-width: 14
#| fig-height: 8.3
```


---

```{r}
#| label: example-motivation-basic-labs
#| eval: false
#| purl: false
```

---

```{r}
#| label: example-motivation-basic-labs
#| echo: false
#| fig-width: 14
#| fig-height: 8.3
```


---

```{r}
#| label: example-motivation-theme-complete
#| eval: false
#| purl: false
```

---

```{r}
#| label: example-motivation-theme-complete
#| echo: false
#| fig-width: 14
#| fig-height: 8.3
```


---

```{r}
#| label: example-motivation-facet-space
#| eval: false
#| purl: false
```

---

```{r}
#| label: example-motivation-facet-space
#| echo: false
#| fig-width: 14
#| fig-height: 8.3
```


---

```{r}
#| label: example-motivation-scales
#| eval: false
#| purl: false
```

---

```{r}
#| label: example-motivation-scales
#| echo: false
#| fig-width: 14
#| fig-height: 8.3
```


---

```{r}
#| label: example-motivation-theme-modifications
#| eval: false
#| purl: false
```

---

```{r}
#| label: example-motivation-theme-modifications
#| echo: false
#| fig-width: 14
#| fig-height: 8.3
```



# That's it Folks...<br><b style='color:#404040;font-size:.7em;font-weight:600;'>— Thank you! —</b>



# Appendix

```{r}
#| label: reset-theme-appendix
#| echo: false
theme_set(theme_light(
  base_size = 14,
  base_family = "Asap Condensed"
))
```


# Statistical Layers

## geom\_\*() and stat\_\*()

::: {layout-ncol="2"}
```{r}
#| label: geom-stat
#| fig-height: 5
#| code-line-numbers: "2"
ggplot(bikes, aes(x = temp_feel, y = count)) +
  geom_smooth(stat = "smooth")
```

```{r}
#| label: stat-geom
#| fig-height: 5
#| code-line-numbers: "2"
ggplot(bikes, aes(x = temp_feel, y = count)) +
  stat_smooth(geom = "smooth")
```
:::


## geom\_\*() and stat\_\*()

::: {layout-ncol="2"}
```{r}
#| label: geom-stat-3
#| fig-height: 5
#| code-line-numbers: "2"
ggplot(bikes, aes(x = date, y = temp_feel)) +
  geom_point(stat = "identity")
```

```{r}
#| label: stat-geom-3
#| fig-height: 5
#| code-line-numbers: "2"
ggplot(bikes, aes(x = date, y = temp_feel)) +
  stat_identity(geom = "point")
```
:::


## geom\_\*() and stat\_\*()

::: {layout-ncol="2"}
```{r}
#| label: geom-stat-2
#| fig-height: 5
#| code-line-numbers: "2"
ggplot(bikes, aes(x = is_weekend)) +
  geom_bar(stat = "count")
```

```{r}
#| label: stat-geom-2
#| fig-height: 5
#| code-line-numbers: "2"
ggplot(bikes, aes(x = is_weekend)) +
  stat_count(geom = "bar")
```
:::

## Statistical Summaries

```{r}
#| label: stat-summary
#| output-location: column
#| code-line-numbers: "5|3"
ggplot(
    bikes, 
    aes(x = season, y = temp_feel)
  ) +
  stat_summary() 
```


## Statistical Summaries

```{r}
#| label: stat-summary-defaults
#| output-location: column
#| code-line-numbers: "6,7"
ggplot(
    bikes, 
    aes(x = season, y = temp_feel)
  ) +
  stat_summary(
    fun.data = mean_se, ## the default
    geom = "pointrange"  ## the default
  ) 
```


## Statistical Summaries

```{r}
#| label: stat-summary-median
#| output-location: column
#| code-line-numbers: "5|5,6,11|6,7,8,9,10,11|7,8"
ggplot(
    bikes, 
    aes(x = season, y = temp_feel)
  ) +
  geom_boxplot() +
  stat_summary(
    fun = mean,
    geom = "point",
    color = "#28a87d",
    size = 3
  ) 
```


## Statistical Summaries

```{r}
#| label: stat-summary-text
#| output-location: column
#| code-line-numbers: "6,7,8,9,10|7,8|9"
ggplot(
    bikes, 
    aes(x = season, y = temp_feel)
  ) +
  stat_summary() +
  stat_summary(
    fun = mean,
    geom = "text",
    aes(label = after_stat(y))
  )
```


## Statistical Summaries

```{r}
#| label: stat-summary-text-custom
#| output-location: column
#| code-line-numbers: "9,10,11|10|12,13"
ggplot(
    bikes, 
    aes(x = season, y = temp_feel)
  ) +
  stat_summary() +
  stat_summary(
    fun = mean,
    geom = "text",
    aes(label = after_stat(
      paste0(round(y, 2), "°C"))
    ),
    hjust = -.2,
    size = 3.5
  )
```

# Aspect Ratios

## How to Work with Aspect Ratios

::: incremental
-   don't rely on the Rstudio viewer pane!
-   once you have a "it's getting close" prototype, settle on a plot size<br><br>
-   **Approach 1:** save the file to disk and inspect it; go back to your IDE
    -   tedious and time-consuming...<br><br>
-   **Approach 2:** use a qmd or rmd with inline output and chunk settings
    -   set `fig.width` and `fig.height` per chunk or globally<br><br>
-   **Approach 3:** use our [{camcorder} package](https://github.com/thebioengineer/camcorder)
    -   saves output from all `ggplot()` calls and displays it in the viewer pane
:::

## Setting Plot Sizes in Rmd's

![](img/plot-size-rmarkdown-example.png){fig-alt="A screenshot of an exemplary Rmd file with two chunks with different settings of fig.width and fig.height." fig-width="60%"}

## Setting Plot Sizes via {camcorder}

<br>

![](img/plot-size-camcorder-example.png){fig-alt="A screenshot of an exemplary R script with a plot automatically saved and isplayed in correct aspect ratio thanks to the camcorder package." fig-width="120%"}
